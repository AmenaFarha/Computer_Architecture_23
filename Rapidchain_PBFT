import hashlib
import time
import datetime
import os
from multiprocessing import Process, Manager
from smart_contract import SimpleBank
import test_input

# Constants for fault tolerance
SHARD_COUNT = 5
PROCESS_COUNT_PER_SHARD = 10  # Each shard should have more than 3f+1 processes for f faults
FAULT_TOLERANCE = (PROCESS_COUNT_PER_SHARD - 1) // 3  # f calculated from 3f+1 formula

filename = "balan.txt"
simple_bank = SimpleBank(filename)

class Block:
    def __init__(self, index, previous_hash, timestamp, transactions):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.transactions = transactions
        self.nonce = 0
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = f"{self.index}{self.previous_hash}{self.timestamp}{self.transactions}{self.nonce}"
        return hashlib.sha256(block_string.encode()).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        return Block(0, "0", time.time(), "Genesis Block")

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.hash = new_block.calculate_hash()
        self.chain.append(new_block)

class Shard:
    def __init__(self, shard_id, manager):
        self.shard_id = shard_id
        self.blockchain = Blockchain()
        self.pending_transactions = manager.list()
        self.prepare_msgs = manager.dict()
        self.commit_msgs = manager.dict()

    def add_transaction(self, transaction):
        self.pending_transactions.append(transaction)

    def pbft_consensus(self):
        if len(self.pending_transactions) < 1:
            return None

        valid_transactions = [tx for tx in self.pending_transactions if tx]  # Simplified validation logic
        if len(valid_transactions) < 2 * FAULT_TOLERANCE + 1:
            print(f"Shard {self.shard_id}: Not enough valid transactions to proceed.")
            return None

        new_block = Block(len(self.blockchain.chain), self.blockchain.get_latest_block().hash, time.time(), valid_transactions)
        prepare_msgs = {}
        commit_msgs = {}

        prepare_processes = [Process(target=self.send_prepare_msg, args=(new_block, i, prepare_msgs)) for i in range(PROCESS_COUNT_PER_SHARD)]
        for p in prepare_processes:
            p.start()
        for p in prepare_processes:
            p.join()

        if len(prepare_msgs) > 2 * FAULT_TOLERANCE + 1:
            commit_processes = [Process(target=self.send_commit_msg, args=(new_block, i, commit_msgs)) for i in range(PROCESS_COUNT_PER_SHARD)]
            for p in commit_processes:
                p.start()
            for p in commit_processes:
                p.join()

            if len(commit_msgs) > 2 * FAULT_TOLERANCE + 1:
                self.blockchain.add_block(new_block)
                self.pending_transactions[:] = []
                print(f"Shard {self.shard_id}: New block added with hash {new_block.hash}")

    def send_prepare_msg(self, new_block, process_id, prepare_msgs):
        prepare_msgs[process_id] = f"Prepare: {new_block.hash} from Process {process_id}"

    def send_commit_msg(self, new_block, process_id, commit_msgs):
        commit_msgs[process_id] = f"Commit: {new_block.hash} from Process {process_id}"

def setup_logging():
    if not os.path.exists("logs"):
        os.makedirs("logs")

def read_transactions_from_file(file_path):
    with open(file_path, 'r') as file:
        return [x.strip() for x in file.read().split(',') if x.strip()]

def main():
    setup_logging()
    file_path = "output.txt"
    
    with Manager() as manager:
        transactions = read_transactions_from_file(file_path)
        shards = [Shard(i, manager) for i in range(SHARD_COUNT)]

        for transaction in transactions:
            shard_index = hash(transaction) % SHARD_COUNT
            shards[shard_index].add_transaction(transaction)

        consensus_processes = [Process(target=shard.pbft_consensus) for shard in shards]
        for p in consensus_processes:
            p.start()
        for p in consensus_processes:
            p.join()

if __name__ == "__main__":
    main()
